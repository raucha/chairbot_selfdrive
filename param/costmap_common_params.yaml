# max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
# footprint: [[-1.5,-1.5], [1.5,-1.5], [1.5,1.5], [-1.5,1.5]]  # if the robot is not circular
# footprint: [[-0.7,-0.7], [0.95,-0.7], [0.95,0.7], [-0.7,0.7]]  # if the robot is not circular
# footprint: [[-100,-100], [0.95,-100], [0.95,100], [-100,100]]  # if the robot is not circular
robot_radius: 0.5  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)

map_type: voxel

obstacle_layer:
  enabled:              true
  # max_obstacle_height:  0.6
  origin_z:             0.0
  z_resolution:         0.2
  z_voxels:             2
  unknown_threshold:    15
  mark_threshold:       0
  combination_method:   1
  track_unknown_space:  true    #true needed for disabling global path planning through unknown space
  obstacle_range: 1000           # この範囲内でのみマップへ障害物を挿入
  raytrace_range: 3           # この範囲内でのみレイトレースでマップをクリアリング
  origin_z: 0.0
  z_resolution: 0.2             # 各ボクセルの高さ
  z_voxels: 2                   # ボクセルを縦に積む個数，これだと40cm・・・？
  publish_voxel_map: false
  observation_sources: pot_cloud
  # observation_sources:  scan scan1 scan2 scan3 scan4 scan5 scan6 scan7 scan8 scan9 scan10 pc pot_cloud
  pot_cloud:
    data_type: PointCloud
    topic: /pot_cloud
    marking: true               # マップへの障害物挿入に利用
    clearing: false              # マップの障害物除去に利用
    min_obstacle_height: -1    # これより高さの低い観測点は排除，デフォルトで0.0
    max_obstacle_height: 2.0  # これより高さの高い観測点は排除，デフォルトで2.0
  pc:
    data_type: PointCloud2
    topic: /passthrough/output
    marking: true               # マップへの障害物挿入に利用
    clearing: false              # マップの障害物除去に利用
    min_obstacle_height: -1    # これより高さの低い観測点は排除，デフォルトで0.0
    max_obstacle_height: 2.0  # これより高さの高い観測点は排除，デフォルトで2.0
  scan:
    data_type: LaserScan
    topic: scan
    marking: true               # マップへの障害物挿入に利用
    clearing: true              # マップの障害物除去に利用
    # min_obstacle_height: 0    # これより高さの低い観測点は排除，デフォルトで0.0
    # max_obstacle_height: 1.0  # これより高さの高い観測点は排除，デフォルトで2.0

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  5.0  # コスト関数の定数．小さいほどコストは上がる(default: 10)
  inflation_radius:     2.0  # コストのグラデーションの最外部の半径．ロボット半径より大きくしないとグラデーションは発生しない．

static_layer:
  enabled:              true

social_navigation_layers:
  enabled:              true
  cutoff :              0
  # cutoff :              10
  amplitude:            1000000000
  # amplitude:            77
  covariance:           0.25







# max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# # Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
# robot_radius: 0.50  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# # footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular

# map_type: voxel

# obstacle_layer:
#   enabled:              true
#   max_obstacle_height:  0.6
#   origin_z:             0.0
#   z_resolution:         0.2
#   z_voxels:             2
#   unknown_threshold:    15
#   mark_threshold:       0
#   combination_method:   1
#   track_unknown_space:  true    #true needed for disabling global path planning through unknown space
#   obstacle_range: 2.5
#   raytrace_range: 3.0
#   origin_z: 0.0
#   z_resolution: 0.2
#   z_voxels: 2
#   publish_voxel_map: false
#   observation_sources:  scan bump
#   scan:
#     data_type: LaserScan
#     topic: scan
#     marking: true
#     clearing: true
#     min_obstacle_height: 0.25
#     max_obstacle_height: 0.35
#   bump:
#     data_type: PointCloud2
#     topic: mobile_base/sensors/bumper_pointcloud
#     marking: true
#     clearing: false
#     min_obstacle_height: 0.0
#     max_obstacle_height: 0.15
#   # for debugging only, let's you see the entire voxel grid

# #cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
# inflation_layer:
#   enabled:              true
#   cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
#   inflation_radius:     3.0  # max. distance from an obstacle at which costs are incurred for planning paths.

# static_layer:
#   enabled:              true