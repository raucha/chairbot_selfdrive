<launch>
    <node pkg="raucha_utils" type="navsatfix_filter.py" name="navsatfix_filter">
      <remap from="navsatfix_in" to="navsat/fix"/>
      <remap from="navsatfix_out" to="navsat/filtered"/>
      <param name="cov_thresh" value="10000"/>
    </node>

    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" respawn="true" output="screen">

      <!-- Frequency of the main run loop. -->
      <param name="frequency" value="30"/>

      <!-- Delay time, in seconds, before we calculate the transform from the UTM frame to your
           world frame. This is especially important if you have use_odometry_yaw set to true.
           Defaults to 0. -->
      <param name="delay" value="1"/>

      <!-- PLEASE READ: Like all nodes in robot_localization, this node assumes that your
           IMU data is reported in the ENU frame. Many IMUs report data in the NED frame,
           so you'll want to verify that your data is in the correct frame before using it.  -->

      <!-- If your IMU does not account for magnetic declination, enter the value for your
           location here. If you don't know it, see http://www.ngdc.noaa.gov/geomag-web/
           (make sure to convert the value to radians). This parameter is mandatory. -->
      <param name="magnetic_declination_radians" value="0"/>

      <!-- Your IMU's yaw, once the magentic_declination_radians value is added to it, should
           report 0 when facing east. If it doesn't, enter the offset here. Defaults to 0. -->
      <param name="yaw_offset" value="0"/>

      <!-- If this is true, the altitude is set to 0 in the output odometry message. Defaults
           to false. -->
      <param name="zero_altitude" value="true"/>
      <!-- <param name="zero_altitude" value="false"/> -->

      <!-- If this is true, the transform world_frame->utm transform is broadcast
           for use by other nodes. Defaults to false. -->
      <!--<param name="broadcast_utm_transform" value="true"/>-->
       <param name="broadcast_utm_transform" value="false"/>

      <!-- If this is true, all received odometry data is converted back to a lat/lon
           and published as a NavSatFix message as /gps/filtered. Defaults to false. -->
      <param name="publish_filtered_gps" value="true"/>
      <!-- <param name="publish_filtered_gps" value="false"/> -->

      <!-- If this is true, the node ignores the IMU data and gets its heading from the
           odometry source (typically the /odometry/filtered topic coming from one of
           robot_localization's state estimation nodes). BE CAREFUL when using this!
           The yaw value in your odometry source *must* be world-referenced, e.g., you
           cannot use your odometry source for yaw if you have only one source for yaw
           data and it has its differential or relative parameter set to true. Defaults
           to false. -->
      <!--<param name="use_odometry_yaw" value="true"/>-->
       <param name="use_odometry_yaw" value="false"/>

      <!-- If true, will retrieve the datum from the 'datum' parameter below, if available.
           If no 'datum' parameter exists, navsat_transform_node will wait until the user
           calls the 'datum' service with the SetDatum service message. -->
      <!--<param name="wait_for_datum" value="false"/>-->
      <param name="wait_for_datum" value="true"/>

      <!-- Instead of using the first GPS location and IMU-based heading for the
      local-frame origin, users can specify the origin (datum) using this parameter.
      The fields in the parameter represent latitude and longitude in decimal degrees,
      and heading in radians. As navsat_transform_node assumes an ENU standard, a 0
      heading corresponds to east. -->
      <!--<rosparam param="datum">[33.597235, 130.227455, 0.0, pcd_map, base_footprint]</rosparam>-->
      <!--from googlemap-->
      <rosparam param="datum">[33.597161, 130.227557, 0.0, pcd_map, base_footprint]</rosparam>

      <remap from="/imu/data" to="/imu/data"/>
      <remap from="/odometry/filtered" to="/odometry/ekf_relative"/>
      <remap from="/gps/fix" to="/navsat/filtered"/>
      <!-- <remap from="/gps/fix" to="/navsat/fix"/> -->

      <!-- Placeholders for output remapping.
      <remap from="/odometry/gps" to=""/>
      <remap from="/gps/filtered" to=""/>
      -->
    </node>
     <node name="gps_conv" pkg="gps_common" type="utm_odometry_node">
      <remap from="odom" to="/gps_conv"/>
      <remap from="fix" to="/navsat/fix" />
      <param name="rot_covariance" value="99999" />
      <param name="frame_id" value="utm" />
      <param name="child_frame_id" value="gps_conv" />
    </node>
</launch>
